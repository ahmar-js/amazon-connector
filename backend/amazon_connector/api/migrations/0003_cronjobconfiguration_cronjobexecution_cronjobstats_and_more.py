# Generated by Django 4.2.21 on 2025-07-09 09:34

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('django_celery_beat', '0019_alter_periodictasks_options'),
        ('api', '0002_marketplacelastrun'),
    ]

    operations = [
        migrations.CreateModel(
            name='CronJobConfiguration',
            fields=[
                ('job_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this cron job', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Unique name for the cron job', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of what this cron job does', null=True)),
                ('job_type', models.CharField(choices=[('fetch', 'Data Fetch'), ('sync', 'Data Sync'), ('cleanup', 'Data Cleanup'), ('custom', 'Custom Task')], help_text='Type of job to be executed', max_length=50)),
                ('task_name', models.CharField(help_text='Full path to the Celery task (e.g., api.tasks.fetch_amazon_data)', max_length=255)),
                ('task_args', models.JSONField(blank=True, default=list, help_text='Arguments to pass to the task')),
                ('task_kwargs', models.JSONField(blank=True, default=dict, help_text='Keyword arguments to pass to the task')),
                ('interval_type', models.CharField(choices=[('seconds', 'Seconds'), ('minutes', 'Minutes'), ('hours', 'Hours'), ('days', 'Days'), ('weeks', 'Weeks'), ('months', 'Months')], default='minutes', help_text='Type of interval for scheduling', max_length=20)),
                ('interval_value', models.PositiveIntegerField(default=30, help_text='Value for the interval (e.g., 30 for 30 minutes)')),
                ('cron_expression', models.CharField(blank=True, help_text='Cron expression for complex scheduling (optional)', max_length=255, null=True)),
                ('start_time', models.DateTimeField(blank=True, help_text='When to start executing this cron job', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='When to stop executing this cron job', null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('disabled', 'Disabled')], default='active', help_text='Current status of the cron job', max_length=20)),
                ('max_retries', models.PositiveIntegerField(default=3, help_text='Maximum number of retries if task fails')),
                ('retry_delay', models.PositiveIntegerField(default=60, help_text='Delay between retries in seconds')),
                ('timeout', models.PositiveIntegerField(default=3600, help_text='Task timeout in seconds')),
                ('max_concurrent_executions', models.PositiveIntegerField(default=1, help_text='Maximum number of concurrent executions allowed')),
                ('send_notifications', models.BooleanField(default=True, help_text='Whether to send notifications on failures')),
                ('notification_emails', models.JSONField(blank=True, default=list, help_text='List of email addresses to notify on failures')),
                ('created_by', models.CharField(default='system', help_text='Who created this cron job', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('periodic_task', models.OneToOneField(blank=True, help_text='Associated periodic task in django-celery-beat', null=True, on_delete=django.db.models.deletion.CASCADE, to='django_celery_beat.periodictask')),
            ],
            options={
                'verbose_name': 'Cron Job Configuration',
                'verbose_name_plural': 'Cron Job Configurations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CronJobExecution',
            fields=[
                ('execution_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this execution', primary_key=True, serialize=False)),
                ('task_id', models.CharField(blank=True, help_text='Celery task ID for this execution', max_length=255, null=True)),
                ('scheduled_time', models.DateTimeField(help_text='When this execution was scheduled to run')),
                ('started_at', models.DateTimeField(blank=True, help_text='When the execution actually started', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the execution completed', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('success', 'Success'), ('failure', 'Failure'), ('timeout', 'Timeout'), ('cancelled', 'Cancelled'), ('retry', 'Retry')], default='pending', help_text='Current status of this execution', max_length=20)),
                ('result', models.JSONField(blank=True, help_text='Task result data', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if execution failed', null=True)),
                ('traceback', models.TextField(blank=True, help_text='Full traceback if execution failed', null=True)),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of retries attempted')),
                ('duration_seconds', models.FloatField(blank=True, help_text='Duration of execution in seconds', null=True)),
                ('memory_usage_mb', models.FloatField(blank=True, help_text='Memory usage in MB', null=True)),
                ('cpu_usage_percent', models.FloatField(blank=True, help_text='CPU usage percentage', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cron_job', models.ForeignKey(help_text='Associated cron job configuration', on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='api.cronjobconfiguration')),
            ],
            options={
                'verbose_name': 'Cron Job Execution',
                'verbose_name_plural': 'Cron Job Executions',
                'ordering': ['-scheduled_time'],
            },
        ),
        migrations.CreateModel(
            name='CronJobStats',
            fields=[
                ('stats_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this stats entry', primary_key=True, serialize=False)),
                ('date', models.DateField(help_text='Date for these statistics')),
                ('total_executions', models.PositiveIntegerField(default=0, help_text='Total number of executions')),
                ('successful_executions', models.PositiveIntegerField(default=0, help_text='Number of successful executions')),
                ('failed_executions', models.PositiveIntegerField(default=0, help_text='Number of failed executions')),
                ('avg_duration_seconds', models.FloatField(blank=True, help_text='Average execution duration in seconds', null=True)),
                ('max_duration_seconds', models.FloatField(blank=True, help_text='Maximum execution duration in seconds', null=True)),
                ('min_duration_seconds', models.FloatField(blank=True, help_text='Minimum execution duration in seconds', null=True)),
                ('avg_memory_usage_mb', models.FloatField(blank=True, help_text='Average memory usage in MB', null=True)),
                ('avg_cpu_usage_percent', models.FloatField(blank=True, help_text='Average CPU usage percentage', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cron_job', models.ForeignKey(help_text='Associated cron job configuration', on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='api.cronjobconfiguration')),
            ],
            options={
                'verbose_name': 'Cron Job Stats',
                'verbose_name_plural': 'Cron Job Stats',
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['cron_job', '-date'], name='api_cronjob_cron_jo_425adc_idx')],
                'unique_together': {('cron_job', 'date')},
            },
        ),
        migrations.CreateModel(
            name='CronJobLog',
            fields=[
                ('log_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this log entry', primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When this log entry was created')),
                ('level', models.CharField(choices=[('debug', 'Debug'), ('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='info', help_text='Log level', max_length=20)),
                ('message', models.TextField(help_text='Log message')),
                ('context', models.JSONField(blank=True, default=dict, help_text='Additional context data')),
                ('source', models.CharField(blank=True, help_text='Source of the log entry (e.g., function name)', max_length=255, null=True)),
                ('line_number', models.PositiveIntegerField(blank=True, help_text='Line number in source code', null=True)),
                ('execution', models.ForeignKey(help_text='Associated cron job execution', on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='api.cronjobexecution')),
            ],
            options={
                'verbose_name': 'Cron Job Log',
                'verbose_name_plural': 'Cron Job Logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['execution', '-timestamp'], name='api_cronjob_executi_8743fd_idx'), models.Index(fields=['level', '-timestamp'], name='api_cronjob_level_8454b0_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='cronjobexecution',
            index=models.Index(fields=['cron_job', '-scheduled_time'], name='api_cronjob_cron_jo_1bb683_idx'),
        ),
        migrations.AddIndex(
            model_name='cronjobexecution',
            index=models.Index(fields=['status', '-scheduled_time'], name='api_cronjob_status_d2a9d1_idx'),
        ),
        migrations.AddIndex(
            model_name='cronjobexecution',
            index=models.Index(fields=['task_id'], name='api_cronjob_task_id_2fd048_idx'),
        ),
        migrations.AddIndex(
            model_name='cronjobconfiguration',
            index=models.Index(fields=['status', '-created_at'], name='api_cronjob_status_846a24_idx'),
        ),
        migrations.AddIndex(
            model_name='cronjobconfiguration',
            index=models.Index(fields=['job_type', '-created_at'], name='api_cronjob_job_typ_d7efde_idx'),
        ),
        migrations.AddIndex(
            model_name='cronjobconfiguration',
            index=models.Index(fields=['task_name'], name='api_cronjob_task_na_489346_idx'),
        ),
    ]
